import java.util.Stack;

public class TorreDeHanoiComPilhasERecursaoEMinimoDeJogadas {
    public static void main(String[] args) {
        int numDiscos = 5;
        Stack<Integer> origem = new Stack<>();
        Stack<Integer> destino = new Stack<>();
        Stack<Integer> auxiliar = new Stack<>();

        for (int i = numDiscos; i >= 1; i--) {
            origem.push(i);
        }

        int numJogadas = moverDiscos(numDiscos, origem, destino, auxiliar);
        System.out.println("Número mínimo de jogadas: " + numJogadas);
    }

    public static int moverDiscos(int n, Stack<Integer> origem, Stack<Integer> destino, Stack<Integer> auxiliar) {
        if (n == 1) {
            int disco = origem.pop();
            destino.push(disco);
            System.out.println("Mover disco " + disco + " de " + origem + " para " + destino);
            return 1;
        } else {
            int numJogadas1 = moverDiscos(n - 1, origem, auxiliar, destino);

            int disco = origem.pop();
            destino.push(disco);
            System.out.println("Mover disco " + disco + " de " + origem + " para " + destino);

            int numJogadas2 = moverDiscos(n - 1, auxiliar, destino, origem);

            return numJogadas1 + numJogadas2 + 1;
        }
    }
}
